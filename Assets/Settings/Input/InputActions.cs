//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KeyboardMaps"",
            ""id"": ""423f3211-a172-453a-9a29-8688ae63830a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""d6268d73-e770-4d8c-b13b-478fb672651b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""34a6b18d-b0f7-477b-a533-98fb66b9e23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""5b8fe76b-ecfd-4967-a2cb-d215c6ccfb46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Laser"",
                    ""type"": ""Button"",
                    ""id"": ""4a631b9c-b3b8-4bac-947a-f74c18ba7654"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""898ca1e5-31fe-4316-b4c6-da9f170acea5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d4a1c06-d3e1-4bc9-b2f6-e1eab6ef36b2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8f5b35d7-2e36-4342-a1f4-f9b53cb27102"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c29412c7-8e15-48a4-956a-c6a3d2e0c6a3"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2c7a9783-189c-45d6-87ed-f02b0a602b9b"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70d38199-a8fd-4d3a-890f-d380c3a0206f"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053a6a76-0aee-437f-a9c9-07221009da3f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Laser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20330460-4f91-4c4d-be22-4f6e6c5f4f82"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultScheme"",
            ""bindingGroup"": ""DefaultScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeyboardMaps
        m_KeyboardMaps = asset.FindActionMap("KeyboardMaps", throwIfNotFound: true);
        m_KeyboardMaps_Move = m_KeyboardMaps.FindAction("Move", throwIfNotFound: true);
        m_KeyboardMaps_Rotate = m_KeyboardMaps.FindAction("Rotate", throwIfNotFound: true);
        m_KeyboardMaps_Fire = m_KeyboardMaps.FindAction("Fire", throwIfNotFound: true);
        m_KeyboardMaps_Laser = m_KeyboardMaps.FindAction("Laser", throwIfNotFound: true);
        m_KeyboardMaps_Escape = m_KeyboardMaps.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMaps
    private readonly InputActionMap m_KeyboardMaps;
    private IKeyboardMapsActions m_KeyboardMapsActionsCallbackInterface;
    private readonly InputAction m_KeyboardMaps_Move;
    private readonly InputAction m_KeyboardMaps_Rotate;
    private readonly InputAction m_KeyboardMaps_Fire;
    private readonly InputAction m_KeyboardMaps_Laser;
    private readonly InputAction m_KeyboardMaps_Escape;
    public struct KeyboardMapsActions
    {
        private @InputActions m_Wrapper;
        public KeyboardMapsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KeyboardMaps_Move;
        public InputAction @Rotate => m_Wrapper.m_KeyboardMaps_Rotate;
        public InputAction @Fire => m_Wrapper.m_KeyboardMaps_Fire;
        public InputAction @Laser => m_Wrapper.m_KeyboardMaps_Laser;
        public InputAction @Escape => m_Wrapper.m_KeyboardMaps_Escape;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMapsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardMapsActions instance)
        {
            if (m_Wrapper.m_KeyboardMapsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnRotate;
                @Fire.started -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnFire;
                @Laser.started -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnLaser;
                @Laser.performed -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnLaser;
                @Laser.canceled -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnLaser;
                @Escape.started -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_KeyboardMapsActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_KeyboardMapsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Laser.started += instance.OnLaser;
                @Laser.performed += instance.OnLaser;
                @Laser.canceled += instance.OnLaser;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public KeyboardMapsActions @KeyboardMaps => new KeyboardMapsActions(this);
    private int m_DefaultSchemeSchemeIndex = -1;
    public InputControlScheme DefaultSchemeScheme
    {
        get
        {
            if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultScheme");
            return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
        }
    }
    public interface IKeyboardMapsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnLaser(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
